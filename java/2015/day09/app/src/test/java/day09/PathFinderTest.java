/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package day09;

import org.junit.jupiter.api.Test;

import filelinesloader.FileLinesLoader;

import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class PathFinderTest {

    List<PathLeg> paths() {
        List<PathLeg> paths = new ArrayList<>();
        String[] lines = FileLinesLoader.getLines("test-input.txt");
        for (String line : lines) {
            PathLeg[] parsedPaths = PathLeg.parsePathLegString(line);
            paths.addAll(Arrays.asList(parsedPaths));
        }
        return paths;
    }

    @Test
    void canAddPathDistance() {
        List<PathLeg> paths = paths();
        PathFinder pathFinder = new PathFinder(paths.toArray(new PathLeg[] {}));
        assertTrue(pathFinder.getPathLength(new ArrayList<>(List.of("London", "Dublin", "Belfast"))) == 605);
        assertTrue(pathFinder.getPathLength(new ArrayList<>(List.of("London", "Belfast", "Dublin"))) == 659);
    }

    @Test
    void canFindShortestRouteDistance() {
        List<PathLeg> paths = paths();
        PathFinder pathFinder = new PathFinder(paths.toArray(new PathLeg[] {}));
        assertTrue(pathFinder.shortestDistanceThroughAllNodes() == 605);
    }

    @Test
    void canGetRemainingNodes() {
        List<PathLeg> paths = paths();
        PathFinder pathFinder = new PathFinder(paths.toArray(new PathLeg[] {}));

        assertTrue(pathFinder.remainingNodes(new ArrayList<>()).size() == 3);

        assertTrue(pathFinder.remainingNodes(new ArrayList<>(List.of("London"))).size() == 2);

        assertTrue(pathFinder.remainingNodes(new ArrayList<>(List.of("London", "Dublin"))).size() == 1);
    }
}
